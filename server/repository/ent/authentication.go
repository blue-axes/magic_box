// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"magic_box/server/repository/ent/authentication"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Authentication is the model entity for the Authentication schema.
type Authentication struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 登陆名
	Username string `json:"username,omitempty"`
	// 姓名
	Name string `json:"name,omitempty"`
	// 密码
	Password []byte `json:"password,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Authentication) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case authentication.FieldPassword:
			values[i] = new([]byte)
		case authentication.FieldID:
			values[i] = new(sql.NullInt64)
		case authentication.FieldUsername, authentication.FieldName:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Authentication", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Authentication fields.
func (a *Authentication) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case authentication.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case authentication.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				a.Username = value.String
			}
		case authentication.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				a.Name = value.String
			}
		case authentication.FieldPassword:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value != nil {
				a.Password = *value
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Authentication.
// Note that you need to call Authentication.Unwrap() before calling this method if this Authentication
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Authentication) Update() *AuthenticationUpdateOne {
	return NewAuthenticationClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Authentication entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Authentication) Unwrap() *Authentication {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Authentication is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Authentication) String() string {
	var builder strings.Builder
	builder.WriteString("Authentication(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("username=")
	builder.WriteString(a.Username)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(a.Name)
	builder.WriteString(", ")
	builder.WriteString("password=")
	builder.WriteString(fmt.Sprintf("%v", a.Password))
	builder.WriteByte(')')
	return builder.String()
}

// Authentications is a parsable slice of Authentication.
type Authentications []*Authentication

func (a Authentications) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
